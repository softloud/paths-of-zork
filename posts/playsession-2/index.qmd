---
title: "Visual Diary"  
subtitle: "Playsession 2"
author: "Charles T. Gray"
date: "2024-10-26"
execute: 
  error: true
  message: false
  freeze: auto
categories: 
  - zork
  - R
  - code structures
# image: "../../img/2024-10-22--zork-graph.png"
---

```{r message=FALSE}
library(tidyverse)

```

> Playsession highlights: found out I can run zork from VSC's terminal, data capture needs to be done in googlesheets for ease of categorical variable handling. 

So now I need better data capture than editing the raw tsv, and a better way of organising my code. Currently I have data in `zork/data`. 

Already I see I need to split the data into two datasets. One where each row is uniquely defined by node 

```{r }
read_tsv(
  paste0(here::here(), '/raw_data/zork-nodes.tsv'),
  show_col_types = FALSE) %>%
  head() |> # why has my keybinding for pipe stopped working? argh
  gt::gt()

```

and one where each row is uniquely defined by edge.


```{r error=TRUE}


read_tsv(
  paste0(here::here(), '/raw_data/zork-edges.tsv'),
  show_col_types = FALSE) %>%
  head() |>
  gt::gt()

```


No doubt there will be other things. (Do I need a dataset for region?)

## Instantiate the data

I will create a new dataset for this, but use the original Playsession as the template. 

```{r}

# Create sets required for graph object
source('init-graph.R')

# Created an empty dataframe for edges

zork_edges

# Created an empty dataframe for nodes

zork_nodes


```

## Update the data

I could do something fancy, but I think I'll go with `add_row` to update the data. Let's add one row for the start.

### Set levels of columns


```{r}
# Set levels of columns

source('set-levels.R')

# Define a custom print function
print_vector <- function(name, vector) {
  cat(name, ":\n", paste(vector, collapse = ", "), "\n\n")
}

```


#### Locations

```{r warning = FALSE}


# Define the dimensions of the matrix (e.g., 2 rows and 3 columns)
n_cols <- 4
n_rows <- ceiling(length(locations) / n_cols)

# Create an empty matrix with the specified dimensions and fill it row-wise
# Suppressed warning because ragged length of vector, i.e., no guarantee it will
# fill out matrix
locations_matrix <- matrix(locations, nrow = n_rows, ncol = n_cols, byrow = TRUE)

# Print the matrix
locations_matrix
```



#### Regions

```{r}
# Print regions
print_vector("Regions", regions)
```

#### Directions

```{r}
# Print directions
print_vector("Directions", directions)
```

### Set nodes

```{r}
unknown = 'unknown'

source('set-nodes.R')

zork_nodes

```

### Set edges

```{r}

source('set-edges.R')

zork_edges

```


## Instantiate the plot

I wonder if I can join the nodes dataframe to the nodes of the ggraph object? 

### Create graph object

```{r message = FALSE}
library(tidygraph)

```

```{r}

get_zork_graph <- function(zork_edges, zork_nodes, selected_region='all') {

  if (selected_region != 'all') {
    zork_nodes <- zork_nodes  |>  filter(region %in% c(selected_region, 'unexplored'))
  }

  zork_base_graph <- 
    zork_edges |> 
      mutate(
        from = perspective_location,
        to = target_location
      ) |>
      # does order matter?
      select(from, to, everything()) |>
      as_tbl_graph()
  # Join the nodes data frame to the nodes of the graph
  zork_graph <- zork_base_graph |>
    activate(nodes) |>
    # add attributes to nodes
    inner_join(zork_nodes, by = c("name" = "perspective_location"))

  return(zork_graph)

}



```

```{r}
zork_cellar <- get_zork_graph(zork_edges, zork_nodes |> filter(region %in% c('cellar', 'unexplored')))

zork_graph <- get_zork_graph(zork_edges, zork_nodes)


```

### Plot the graph object


```{r fig.height = 15, fig.width=12, message=FALSE}
library(ggraph)
install.packages("viridis")
library(viridis)
library(RColorBrewer)

n_regions <- length(regions)

# cols_f <- colorRampPalette(RColorBrewer::brewer.pal(8, 'Dark2'))
cols_f <- viridis::viridis_pal(option = "D")

zork_paths <- function(zork_graph) {
  zork_graph |>
    ggraph() +

    # configure edges
      geom_edge_fan(aes(label = perspective_to_target), 
        alpha = 0.2, 
        angle_calc = 'along',
        label_colour = 'grey',
        label_dodge = unit(2.5, 'mm'),
        colour = 'white',
        family = 'Courier',
        arrow = arrow(length = unit(2, 'mm')), 
        end_cap = circle(1, 'cm')) +

  # configure nodes

        geom_node_label(
          aes(label = name, fill=region),
          colour = 'white',
          family = 'Courier',
          alpha = 0.3
        ) + 

  # configure styling
    theme_minimal() +
    scale_edge_colour_manual(values = cols_f(n_regions)) + 
      scale_colour_manual(values = cols_f(n_regions)) +
      theme(
        plot.background = element_rect(fill = "#333333", colour = NA),
        legend.position = 'right',
        text = element_text(family = "Courier", size = 20),
        axis.ticks = element_blank(),
        axis.text = element_blank(),
        panel.grid = element_blank(),
        plot.title = element_text(colour = 'white'),
        plot.subtitle = element_text(colour = 'white'),
        plot.caption = element_text(colour = 'white'),
        legend.text = element_text(colour = 'white'),
        plot.margin = margin(10, 10, 10, 10)  # Adjust plot margins
     ) + 
    scale_x_continuous(expand = expansion(mult = 0.2)) +  # Add space around x-axis
    scale_y_continuous(expand = expansion(mult = 0.2)) +  # Add space around y-axis

  # configure text
      labs(
        title = "Paths of Zork",
        subtitle = "Playsession 3 (2024-10-26)",
        caption = "Angle of edge determined by ggraph, not direction",
        x = "",
        y = "",
        colour = 'white'
      ) 
}



```

### Full map

```{r, message=FALSE, fig.height = 15, fig.width = 12}
zork_paths(zork_graph)

ggsave('2024-10-26--graph.png', dpi=1000)


```

### The cellar

```{r message=FALSE, fig.height = 6, fig.width = 12}

zork_paths(get_zork_graph(zork_edges, zork_nodes, 'cellar'))

ggsave('2024-10-26--graph-cellar.png', dpi=1000)

```

### The forest

```{r message=FALSE, fig.height = 10, fig.width = 12}
zork_paths(get_zork_graph(zork_edges, zork_nodes, 'forest'))

ggsave('2024-10-26--graph-forest.png', dpi=1000)

```

## Display the loot 

```{r}
library(gt)

zork_nodes |>
  gt()


```

## Finally! I can play! 

Now to add rows and watch the plot update. 

### At 13 locations discovered

Next time will try using a google sheet and scraping it. Is too cumbersome coding. But will have to get workflow for setting levels of categorical variables. 

### At 21 locations

Don't want to proceed without fixing the data entry. Especially now that I'm switching to command line zork, so much better. 


```{bash, eval = FALSE}
sudo snap install zork
```


```{r}

write_tsv(zork_edges, '2024-10-26--edges.tsv')
write_tsv( zork_nodes, '2024-10-26--nodes.tsv')

```54p